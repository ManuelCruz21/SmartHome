@startuml
!pragma layout smetana

class SensorType<<entity>> <<root>> {
  - _id: sensorID
  - _description: Description
  - _unit: Unit
  + SensorType(id: SensorTypeID, description: Description, unit: Unit)
  + getId(): string
  + getDescription(): Description
  + getUnit(): Unit
  }

class SensorTypeFactory<<Factory>> {
  + createNewSensorType(description: Description, unit: Unit): SensorType
  }

class SensorTypeRepository<<Repository>> {
  - _map<ID, SensorType> sensorTypes
  + save(sensorType: SensorType): SensorType
  }
class SensorTypeService<<Service>> {
    - _sensorTypeRepository: SensorTypeRepository
    - _sensorTypeFactory: SensorTypeFactory
    - _sensorTypeAssembler: SensorTypeAssembler
  + SensorTypeService(sensorTypeRepository: SensorTypeRepository, sensorTypeFactory: SensorTypeFactory, sensorTypeAssembler: SensorTypeAssembler)
  + addSensorType(name: String, unit: String, sensorTypeFactory: SensorTypeFactory): SensorType
  + getAllSupportedUnits(): List<String>
  }
class AddSensorTypeController<<Controller>> {
  - _sensorTypeService: SensorTypeService
  + AddSensorTypeController(SensorTypeService: sensorTypeService)
  + getSupportedUnits(): List<String>
  + createNewSensorType(name: String, unit: String): SensorTypeDTO
  }
class SensorTypeDTO<<DTO>> {
+ id: string
+ description: string
+ unit: string
+ SensorTypeDTO(sensorType: SensorType)
}
class SensorTypeAssembler<<Assembler>> {
  + domainToDTO(sensorType: SensorType): SensorTypeDTO
  }

enum Unit <<enum>> {
+ TEMPERATURE
+ HUMIDITY
...
+ getAll(): string[]
}


SensorTypeRepository"1" -down-> "*"SensorType: has
SensorTypeService"1" .down.> "1"SensorTypeFactory: uses
SensorTypeService"1" .down.> "1"Unit: uses
SensorTypeService"1" .down.> "1"SensorTypeRepository: uses
SensorTypeFactory"1" .down.> "1..*"SensorType: creates
AddSensorTypeController"1" .down.> "1"SensorTypeService: uses
SensorTypeService"1" .down.> "1"SensorTypeAssembler: uses
SensorTypeAssembler"1" .up.> "1"SensorTypeDTO: creates




@enduml