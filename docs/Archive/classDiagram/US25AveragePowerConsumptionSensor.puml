@startuml
'https://plantuml.com/class-diagram

!pragma layout smetana

class AveragePowerConsumptionSensorID {
    - id : String
}

class SensorTypeID {
    - id : String
}

class AveragePowerConsumptionSensor implements Sensor {
- _sensorType: SensorType
- _powerConsumptions: HashMap<LocalDateTime, Double>
- _averagePowerConsumptionSensorValue: AveragePowerConsumptionSensorValue
- _dValue: Double
+ AveragePowerConsumptionSensor(catalogue: CatalogueSensor) throws InstantiationException
+ setSensorType(catalogue: CatalogueSensor) throws InstantiationException
# addReading(readTime: LocalDateTime, reading: Double): Double
+ getValue(): AveragePowerConsumptionSensorValue
+ getValue(initialTime: LocalDateTime, finalTime: LocalDateTime): AveragePowerConsumptionSensorValue
    }

class AveragePowerConsumptionSensorValue implements Value {
    - _nValue : double
    + AveragePowerConsumptionSensorValue(nValue : double)
    + toString() : String
    + equals(other: ValueObject): Boolean
}

interface Sensor {
    + getSensorType() : SensorType
    + getValue() : Value
}

class SensorType {
    - _id : SensorTypeID
    - _description : String
    - _unit : Unit
    + SensorType(id : SensorTypeID, description : String, unit : Unit)
    + getId() : SensorTypeID
    + getDescription() : String
    + getUnit() : Unit
}

class ImpSensorTypeFactory implements SensorTypeFactory{
    + createSensorType(description : String, unit : Unit) : SensorType
}

interface SensorTypeFactory{
    + createSensorType(description : String, unit : Unit) : SensorType
}

class Unit {
    - _description : String
    + Unit(description : String)
    + getUnit() : String
    + getAllSupportedUnits() : List<String>
}

interface Value {
    + equals(other: ValueObject): Boolean
    + hashCode(): Int
}

class CatalogueSensor {
    - _sensorTypes : List<SensorType>
    - _listStringClassSensors : List<String>
    + CatalogueSensor(filePath: String)
    + getSensorType(description : String) : SensorType
}

class ImpSensorFactory implements SensorFactory {
    + createSensor() : Sensor
}

interface SensorFactory {
    + createSensor() : Sensor
}

class SensorRepository {
    + getSensor(sensorType : SensorType) : Sensor
}

CatalogueSensor --> AveragePowerConsumptionSensor : provides type info >
CatalogueSensor ..> SensorType : retrieves >
SensorType --> Unit : has
ImpSensorFactory ..> AveragePowerConsumptionSensor : creates >
SensorRepository ..> AveragePowerConsumptionSensor : manages >
ImpSensorTypeFactory ..> SensorType : creates >
ImpSensorTypeFactory ..> Unit : uses >
AveragePowerConsumptionSensorID ..> AveragePowerConsumptionSensor : identifies >
SensorTypeID ..> SensorType : identifies >

AveragePowerConsumptionSensor --> AveragePowerConsumptionSensorValue : has >
}

@enduml