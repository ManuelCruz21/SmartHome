@startuml
!pragma layout smetana

participant " " as User

box "Controller" #LightBlue
participant ":AddSensorToDevice_Controller" as AddSensorToDevice_Controller
end box
participant ":RoomService" as roomService

participant ":RoomRepository" as RoomRepository

participant ":RoomAssembler" as RoomAssembler

participant "roomDTO:RoomDTO" as RoomDTO

participant ":DeviceService" as DeviceService

participant "roomDTO:RoomDTO" as RoomDTO

participant ":DeviceRepository" as DeviceRepository

participant ":DeviceAssembler" as DeviceAssembler

participant ":RoomID" as RoomID

participant "deviceDTO:DeviceDTO" as DeviceDTO

participant ":SensorModelService" as SensorModelService

participant "SensorModelRepository" as SensorModelRepository

participant ":SensorModelAssembler" as SensorModelAssembler

participant "sensorModelDTO:SensorModelDTO" as SensorModelDTO

participant ":SensorService" as sensorService

participant ":SensorFactory" as SensorFactory

participant "sensor:Sensor" as Sensor

participant ":SensorRepository" as SensorRepository

participant ":SensorAssembler" as SensorAssembler

participant "sensorDTO:SensorDTO" as SensorDTO

autonumber

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: getRooms()

activate AddSensorToDevice_Controller

AddSensorToDevice_Controller -> roomService: getRooms()

activate roomService

roomService -> RoomRepository: getRooms()

activate RoomRepository

RoomRepository --> roomService: rooms

deactivate RoomRepository

roomService --> AddSensorToDevice_Controller: rooms

deactivate roomService



AddSensorToDevice_Controller -> RoomAssembler: domain2DTO(Rooms)

activate RoomAssembler

loop for each room in copyOfRooms

create RoomDTO
    RoomAssembler -> RoomDTO: createRoomDTO(room)
    activate RoomDTO
    RoomDTO --> RoomAssembler: roomDTO
    deactivate RoomDTO
    RoomAssembler -> RoomAssembler: addToList(roomDTO)
end

RoomAssembler --> AddSensorToDevice_Controller: listRoomsDTO

deactivate RoomAssembler

AddSensorToDevice_Controller --> User: listRoomsDTO

deactivate AddSensorToDevice_Controller

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: getDevices(roomDTO)

activate AddSensorToDevice_Controller


AddSensorToDevice_Controller -> DeviceAssembler: getRoom(String ID) roomDTO)
activate DeviceAssembler
DeviceAssembler -> RoomID: createValueObject(id)
activate RoomID
RoomID --> DeviceAssembler: RoomID
deactivate RoomID
DeviceAssembler --> AddSensorToDevice_Controller: roomID
deactivate DeviceAssembler

AddSensorToDevice_Controller -> DeviceService: getDevices(roomID)
activate DeviceService

DeviceService -> DeviceRepository: getDevices(roomID)

activate DeviceRepository

DeviceRepository --> DeviceService: listDevices

deactivate DeviceRepository

DeviceService -> DeviceAssembler: domain2DTO(ListDevices)

activate DeviceAssembler

loop for each device in copyOfDevices

create DeviceDTO
    DeviceAssembler -> DeviceDTO: createDeviceDTO(device)
    activate DeviceDTO
    DeviceDTO --> DeviceAssembler: deviceDTO
    deactivate DeviceDTO
end

DeviceAssembler --> DeviceService: listDevicesDTO

deactivate DeviceAssembler

DeviceService --> AddSensorToDevice_Controller: listDevicesDTO

deactivate DeviceService

AddSensorToDevice_Controller --> User: listDevicesDTO

deactivate AddSensorToDevice_Controller

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: getSensorModels()

activate AddSensorToDevice_Controller

AddSensorToDevice_Controller -> SensorModelService: getSensorModels()

activate SensorModelService

SensorModelService -> SensorModelRepository: getSensorModels()

activate SensorModelRepository

SensorModelRepository --> SensorModelService: listSensorModels

deactivate SensorModelRepository

SensorModelService --> AddSensorToDevice_Controller: listSensorModels

deactivate SensorModelService

AddSensorToDevice_Controller -> SensorModelAssembler: domain2DTO(sensorModelsStrings)

activate SensorModelAssembler

loop for each sensorModel in copyOfSensorModels

create SensorModelDTO

SensorModelAssembler -> SensorModelDTO: createSensorModelDTO(sensorModel)

activate SensorModelDTO

SensorModelDTO --> SensorModelAssembler: sensorModelDTO

deactivate SensorModelDTO

SensorModelAssembler -> SensorModelAssembler: addToList(sensorModelDTO)

end

SensorModelAssembler --> AddSensorToDevice_Controller: listSensorModelsDTO

deactivate SensorModelAssembler




AddSensorToDevice_Controller -> User: listSensorModelsDTO

deactivate AddSensorToDevice_Controller

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: addSensorToDevice(deviceDTO, sensorModelDTO)

activate AddSensorToDevice_Controller

AddSensorToDevice_Controller -> sensorService: addSensor(deviceID, sensorModelID)

activate sensorService

sensorService -> SensorFactory: createSensor(model, repositorySensorModel, sensorFactory)

activate SensorFactory

create Sensor
SensorFactory --> Sensor: addSensor(Sensor, deviceID)
activate Sensor

Sensor --> SensorFactory: Sensor

deactivate Sensor

SensorFactory --> sensorService: Sensor

deactivate SensorFactory

sensorService --> SensorRepository: saveSensor(Sensor)

activate SensorRepository

SensorRepository --> sensorService: true (or false)

deactivate SensorRepository

sensorService --> AddSensorToDevice_Controller: true (or false)

deactivate sensorService


AddSensorToDevice_Controller -> SensorAssembler: domain2DTO(sensor)

activate SensorAssembler

loop for each Sensor in copyOfSensors

create SensorDTO

SensorAssembler -> SensorDTO: createSensorDTO(sensor)

activate SensorDTO

SensorDTO --> SensorAssembler: sensorDTO

deactivate SensorDTO

end

SensorAssembler --> AddSensorToDevice_Controller : sensorDTO

deactivate SensorAssembler




AddSensorToDevice_Controller --> User: sensorDTO

deactivate AddSensorToDevice_Controller

@enduml