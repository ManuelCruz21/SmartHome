@startuml
!pragma layout smetana

package domain.Sensor {
    interface Sensor {
        + getID(): SensorID
        + getName: SensorName
        + getModelPath(): ModelPath
        + getSensorTypeID(): SensorTypeID
        + toString(): String
        + getValue(): ValueObject
        + getDeviceID(): DeviceID
    }

    class WindSensor {
            - _modelPath : ModelPath
            - _sensorName : SensorName
            - _sensorID : SensorID
            - _sensorTypeID : SensorTypeID
            - _WindSensorValue : WindSensorValue
            - _deviceID : DeviceID

            + WindSensor(deviceID : DeviceID, modelPath : ModelPath, sensorTypeID : SensorTypeID, sensorName : SensorName)
            + getID() : SensorID
            + getName() : SensorName
            + getModelPath() : ModelPath
            + getSensorTypeID() : SensorTypeID
            + getDeviceID() : DeviceID
            + getValue() : WindSensorValue
        }
}

package valueObject {
    class WindSensorValue {
    - _speed : double
    - _direction : double
    + WindSensorValue(speed: double, _direction: double)
    + getSpeed() : double
    + getDirection() : double
    }
    class SensorTypeID {
        - _id: String
        + SensorTypeID(strDescription: String)
        + getId() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }

    class SensorModelID {
        - _sensorModelID: String
        + SensorModelID(strDescription : String)
        + getId() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }

    class SensorID {
        - _id: String
        + SensorID(id: String)
        + getID() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }

    class DeviceID {
        - _id: String
        + DeviceID(String id)
        + getID() : String
        + hashCode() : int
        + equals(obj: Object) : boolean
        + toString() : String
    }

    class ModelPath {
        - _path: String
        + ModelPath(path: String)
        + toString() : String
    }
}

package ddd {

  interface DomainEntity {
  }

  interface DomainID {
  }

  interface AggregateRoot {
  }
}

WindSensor ..|> domain.Sensor.Sensor

WindSensor --> "1" WindSensorValue : has
WindSensor -->  "1" SensorTypeID : has
WindSensor -->  "1" SensorModelID : has
WindSensor -->  "1" SensorID : has
WindSensor -->  "1" DeviceID : has
WindSensor -->  "1" ModelPath : has

DomainEntity --|> DomainID
AggregateRoot --|> DomainEntity
AggregateRoot --|> DomainID

SensorTypeID ..|> ddd.DomainID
SensorModelID ..|> ddd.DomainID
SensorID ..|> ddd.DomainID
DeviceID ..|> ddd.DomainID

@enduml