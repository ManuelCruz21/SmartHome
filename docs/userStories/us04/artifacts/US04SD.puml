@startuml
!pragma layout smetana

actor "  " as User
participant ":AddSensorTypeController" as Controller
participant ":SensorTypeService" as Service
participant ":UnitRepo" as Unit
participant ":UnitAssembler" as UnitAssembler

participant ":MeasurementTypeDTO" as MeasurementTypeDTO
participant ":SensorTypeAssembler" as SensorTypeAssembler
participant ":UnitID" as UnitID
participant ":Description" as Description
participant ":SensorTypeFactory" as Factory
participant "sensorType:SensorType" as Type
participant ":SensorTypeRepository" as Repository
participant ":SensorTypeDTO" as SensorTypeDTO

User o-> Controller: 1: getSupportedMeasurementTypes()
activate Controller
Controller -> Service: 1.1: getAllSupportedUnits()
activate Service
Service -> Unit: 1.1.1: getAllSupportedUnits()
activate Unit
Unit --> Service: listUnits
deactivate Unit
Service --> Controller: listUnits
deactivate Service
Controller -> UnitAssembler: 1.2: domainToDTO(listUnits)
activate UnitAssembler
loop
create MeasurementTypeDTO
  UnitAssembler -> MeasurementTypeDTO: 1.2.1: createMeasurementTypeDTO(measurementType)
  activate MeasurementTypeDTO
  MeasurementTypeDTO --> UnitAssembler: measurementTypeDTO
  UnitAssembler -> UnitAssembler: 1.2.2: addMeasurementTypeDTO(measurementTypeDTO)
  deactivate MeasurementTypeDTO
end loop
UnitAssembler --> Controller: listUnitsDTO
  deactivate UnitAssembler


Controller --> User: listUnitsDTO
deactivate Controller

User o-> Controller: 2: createSensorType(dataSensorTypeDTO data)


'------------------------------------------------------------------'
activate Controller
Controller -> SensorTypeAssembler: 2.1: dtoToDomain(srtUnitID)
activate SensorTypeAssembler
create UnitID
SensorTypeAssembler -> UnitID: 2.1.1. createMeasurementTypeID(srtUnitID)
activate UnitID
UnitID --> SensorTypeAssembler: unitID
deactivate UnitID
SensorTypeAssembler --> Controller: unitID
Controller -> SensorTypeAssembler: 2.2: dtoToDomain(strDescription)
create Description
SensorTypeAssembler -> Description: 2.2.1: createDescription(strDescription)
activate Description
Description --> SensorTypeAssembler: description
deactivate Description
SensorTypeAssembler --> Controller: description
deactivate SensorTypeAssembler

Controller -> Service: 2.3: createSensorType(description, unitID)
activate Service
Service -> Factory: 2.3.1: addSensorType(description, unitID)
activate Factory
create Type
Factory -> Type: 2.3.1.1: createSensorType(description, unitID)
activate Type
Type --> Factory: sensorType
deactivate Type
Factory --> Service: sensorType
deactivate Factory
Service -> Repository: 2.3.2: save(sensorType)
activate Repository
Repository --> Service: sensorType
deactivate Repository
Service --> Controller: sensorType
deactivate Service

Controller --> SensorTypeAssembler: 2.4: domainToDTO(sensorType)
activate SensorTypeAssembler
create SensorTypeDTO
SensorTypeAssembler -> SensorTypeDTO: 2.4.1: createSensorTypeDTO(sensorType)
activate SensorTypeDTO
SensorTypeDTO --> SensorTypeAssembler: sensorTypeDTO
deactivate SensorTypeDTO
SensorTypeAssembler --> Controller: sensorTypeDTO
deactivate SensorTypeAssembler
Controller --> User: sensorTypeDTO
deactivate Controller

@enduml