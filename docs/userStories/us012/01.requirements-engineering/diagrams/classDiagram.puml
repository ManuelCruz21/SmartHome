@startuml
'https://plantuml.com/class-diagram

class AddActuatorToDeviceController{
    -house: House
    -catalogue: CatalogueActuator
    -roomsDTOAndRooms: Map<RoomDTO, Room>
    -devicesDTOAndDevices: Map<DeviceDTO, Device>

    +AddActuatorToDeviceController(house: House, catalogue: CatalogueActuator)
    -isValidConstructorArguments(house: House, catalogue: CatalogueActuator): boolean
    +getRooms(): List<RoomDTO>
    +getDevices(roomDTO: RoomDTO): List<DeviceDTO>
    +addActuatorToDevice(deviceDTO: DeviceDTO, model: String): ActuatorDTO
 }

class RoomAssembler{
    +<<static>> domain2DTO(rooms: List<Room>): List<RoomDTO>
    +<<static>> dto2Domain(roomDTO: RoomDTO): Room
}

class DeviceAssembler{
    +<<static>> domain2DTO(devices: List<Device>): List<DeviceDTO>
    +<<static>> dto2Domain(deviceDTO: DeviceDTO): Device
}

class ActuatorAssembler{
    +<<static>> domain2DTO(actuator: Actuator): ActuatorDTO
}

class House{
    -locationFactory: LocationFactory
    -roomFactory: RoomFactory
    -location: Location
    -rooms: List<Room>

    +House(locationFactory: LocationFactory, roomFactory: RoomFactory, deviceFactory: DeviceFactory)
    +getRooms(): List<Room>
}

class Room{
    -name: String
    -floor: int
    -dimensionsFactory: DimensionsFactory
    -dimensions: Dimensions
    -roomId: UUID
    -devices: List<Device>

    #Room(location: Location)
    +getDevices(): List<Device>
}

class Device{
    -name:String
    -status: boolean
    -sensors: List<Sensor>
    -deviceId: UUID

    +Device(name: String)
    -setName(name: String): void
    +addActuator(model: String, catalogue: CatalogueActuator, actuatorFactory: ActuatorFactory): Actuator
    +addActuatorToDevice(actuator: Actuator): Actuator
}

class CatalogueActuator{
    -listActuatorTypes: List<ActuatorType>

    +CatalogueActuator(filePathname: String)
    -validateConstructorParameters(strDescription: String): boolean
    +getActuator(model: String, actuatorFactory: ActuatorFactory): Actuator
}

class ActuatorFactory{
    +ActuatorFactory()
    +createActuator(model: String, catalogue: CatalogueActuator): Actuator
}

class GenericActuator{
    -actuatorType: ActuatorType
    -value: Value

    +Actuator(catalogue: CatalogueActuator)
}

Interface Actuator{
    Actuator(catalogue: CatalogueActuator)
}

class RoomDTO{
    -name: String
    -dimensions: Dimensions
    -floor: int
    -roomId: UUID

    +RoomDTO(room: Room)
}

class DeviceDTO{
    -name: String
    -status: boolean
    -deviceId: UUID
    -roomDTO: RoomDTO
    -actuators: List<String>
    -sensors: List<String>

    +DeviceDTO(device: Device)
}

class ActuatorDTO{
    -actuatorType: ActuatorType
    -value: Value

    +ActuatorDTO(actuator: Actuator)
}

AddActuatorToDeviceController "1" ..> "1" House: <<uses>>
AddActuatorToDeviceController "1" ..> "1" Room: <<uses>>
AddActuatorToDeviceController "1" ..> "1" Device: <<uses>>
AddActuatorToDeviceController "1" ..> "1" RoomAssembler: <<uses>>
AddActuatorToDeviceController "1" ..> "1" DeviceAssembler: <<uses>>
AddActuatorToDeviceController "1" ..> "1" ActuatorAssembler: <<uses>>

RoomAssembler "1" ..> "*" RoomDTO: <<creates>>

DeviceAssembler "1" ..> "*" DeviceDTO: <<creates>>

ActuatorAssembler "1" ..> "1" ActuatorDTO: <<creates>>

ActuatorFactory "1" ..> "1" GenericActuator: <<creates>>

House "1" --> "*" Room: <<has>>

Room "1" --> "*" Device: <<has>>

Device "1" --> "*" GenericActuator: <<has>>
Device "1" ..> "1" CatalogueActuator: <<uses>>

GenericActuator "1" ..|> "1" Actuator: <<implements>>

CatalogueActuator "1" ..> "*" ActuatorFactory: <<uses>>





@enduml