@startuml
!pragma layout smetana

class SwitchSensorID {
    - id : String
}

class SensorTypeID {
    - id : String
}

class SwitchSensor implements Sensor {
    - _id : SwitchSensorID
    - _sensorType : SensorType
    - _value : SwitchSensorValue
    + SwitchSensor(catalogueSensor : CatalogueSensor)
    + getId() : SwitchSensorID
    + getSensorType() : SensorType
    + getValue() : Value
}

class SwitchSensorValue implements Value {
    - _nValue : double
    + SwitchSensorValue(nValue : double)
    + toString() : String
    + equals(other: ValueObject): Boolean
    + hashCode(): Int
}

interface Sensor {
    + getSensorType() : SensorType
    + getValue() : Value
}

class SensorType {
    - _id : SensorTypeID
    - _description : String
    - _unit : Unit
    + SensorType(id : SensorTypeID, description : String, unit : Unit)
    + getId() : SensorTypeID
    + getDescription() : String
    + getUnit() : Unit
}

class SensorTypeFactory {
    + createSensorType(description : String, unit : Unit) : SensorType
}

class Unit {
    - _description : String
    + Unit(description : String)
    + getUnit() : String
    + getAllSupportedUnits() : List<String>
}

interface Value {
    + equals(other: ValueObject): Boolean
    + hashCode(): Int
}

class CatalogueSensor {
    - _sensorTypes : List<SensorType>
    - _listStringClassSensors : List<String>
    + CatalogueSensor(filePath: String)
    + getSensorType(description : String) : SensorType
}

class SensorFactory {
    + createSensor() : Sensor
}

class SensorRepository {
    + getSensor(sensorType : SensorType) : Sensor
}

CatalogueSensor --> SwitchSensor : provides type info >
CatalogueSensor ..> SensorType : retrieves >
SensorType --> Unit : has
SensorFactory ..> SwitchSensor : creates >
SensorRepository ..> SwitchSensor : manages >
SensorTypeFactory ..> SensorType : creates >
SensorTypeFactory ..> Unit : uses >
SwitchSensorID .. SwitchSensor : identifies >
SensorTypeID .. SensorType : identifies >

SwitchSensor *-- SwitchSensorValue : holds >

@enduml
