@startuml
package domain{
class CatalogueSensor{
'Attributes'
- _listSensorTypes: List<SensorType>
- _listStringClassesSensors: List<String>

'Methods'
+CatalogueSensor(filePathname: String)
}

class SensorType {
}

interface Sensor{
'Methods'
getSensorType(): SensorType
getValue(): Value
}

interface Value{
}

class SensorFactory {
'Methods'
+createSensor(model: String, catalogue: Catalogue): Sensor
}

class SensorTypeFactory {
'Methods'
+createSensorType(strDescription: String, unit: Unit): SensorType
}
}

package sensors{

class SunriseTimeValue{
'Attributes'
- _value: LocalTime

'Methods'
+SunsetTimeValue(value: LocalTime)
+toString(): String
}
class SunriseTimeSensor{
'Attributes'
- _sensorType: SensorType
- _gps: Gps

'Methods'
+SunriseTimeSensor(catalogue: CatalogueSensor)
+getSensorType(): SensorType
+getValue(): Value
+getValue(date: LocalDate): Value
}
}



SensorFactory "1" --> "1" SunriseTimeSensor : <<creates>>
SunriseTimeSensor "1" --> "1" SensorType : <<has>>
SunriseTimeSensor "1" --> "1" SunriseTimeValue : <<uses>>
SunriseTimeSensor "1" ..|> "1" Sensor

CatalogueSensor "1" --> "1" SunriseTimeSensor : <<has>>
CatalogueSensor "1" --> "*" SensorType : <<uses>>
SunriseTimeValue "1" ..|> "1" Value
SensorTypeFactory "1" --> "1" SensorType : <<creates>>


@enduml
