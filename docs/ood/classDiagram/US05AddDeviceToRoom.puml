@startuml
!pragma layout smetana

class Device<<entity>> <<root>> {
  - _id: deviceID
  - _description: Description
  + Device(id: Device, description: Description)
  + getId(): string
  + getDescription(): Description
  }

class deviceID<<value>> {
  - _id: string
  + deviceID(id: string)
  +equals(object : Object) : boolean
  +toString() : String
  }

class DeviceFactory<<Factory>> {
  + createNewDevice(description: Description): Device
  }

class DeviceRepository<<Repository>> {
  - _map<ID, Device> device
  + addDeviceToRepository(device: Device): Device
  }
class DeviceService<<Service>> {
  + addDeviceToRoom(deviceDescription: String, roomId: String): Device
  }

 class RoomService<<Service>> {
  + getRoomByID(roomID:RoomID) : Room
  }

class RoomRepository<<Repository>> {
  - _map<RoomID, Room> room
  + findRoom(roomID:RoomID): Room
  }

class AddDeviceToRoomController<<Controller>> {
  - _deviceService: DeviceService
  - _roomService: RoomService
  + AddDeviceToRoomController(deviceService: DeviceService)
  + createNewDevice(roomID: String, deviceName: String): DeviceDTO
  + addDeviceToRepository(): boolean
  + getAllRooms(): List<RoomDTO>
  }
class DeviceDTO<<DTO>> {
+ id: string
+ description: string
+ DeviceDTO(device: Device)
}
class DeviceAssembler<<Assembler>> {
  + domain2DTO(device: Device): DeviceDTO
  }


DeviceRepository "1" -down-> "1" Device: has
DeviceService "1"-down->"1  " DeviceFactory: has
DeviceService "1"-down->"1" DeviceRepository: has
DeviceService "1".down.>"1" DeviceAssembler: uses
RoomService "1".right.>"1" RoomRepository: uses
DeviceFactory "1".down.>"1  " Device: creates
AddDeviceToRoomController "1".down.>"1" DeviceService: uses
AddDeviceToRoomController "1".down.>"1" RoomService: uses
DeviceAssembler "1".up.> "1  " DeviceDTO: creates




@enduml