@startuml
'https://plantuml.com/sequence-diagram

participant " " as User

box "Pure Fabrication" #grey

participant ":AddSensorToDevice_Controller" as AddSensorToDevice_Controller

participant ":RoomAssembler" as RoomAssembler

participant ":DeviceAssembler" as DeviceAssembler

participant "SensorAssembler" as SensorAssembler

end box

box "Domain"

participant ":House" as House

participant "room:Room" as Room

participant "device:Device" as Device

participant "catalogue:CatalogueSensor" as CatalogueSensor

participant "sensorFactory:SensorFactory" as SensorFactory

participant "sensor:Sensor" as Sensor

end box

box "Data Transfer Object" #grey

participant "roomDTO:RoomDTO" as RoomDTO

participant "deviceDTO:DeviceDTO" as DeviceDTO

participant "sensorDTO:SensorDTO" as SensorDTO

autonumber

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: getRooms()

activate AddSensorToDevice_Controller

AddSensorToDevice_Controller -> House: getRooms()

activate House

House --> AddSensorToDevice_Controller: copyOfRooms

deactivate House

AddSensorToDevice_Controller -> RoomAssembler: domain2DTO(copyOfRooms)

activate RoomAssembler

loop for each room in copyOfRooms

create RoomDTO
    RoomAssembler -> RoomDTO: createRoomDTO(room)
    activate RoomDTO
    RoomDTO --> RoomAssembler: roomDTO
    deactivate RoomDTO
end

RoomAssembler --> AddSensorToDevice_Controller: roomsDTO

deactivate RoomAssembler

AddSensorToDevice_Controller --> User: roomsDTO

deactivate AddSensorToDevice_Controller

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: getDevices(roomDTO)

activate AddSensorToDevice_Controller

AddSensorToDevice_Controller -> RoomAssembler: dto2Domain(roomDTO)

activate RoomAssembler

RoomAssembler --> AddSensorToDevice_Controller: room

deactivate RoomAssembler

AddSensorToDevice_Controller -> Room: getDevices()

activate Room

Room --> AddSensorToDevice_Controller: copyOfDevices

deactivate Room

AddSensorToDevice_Controller -> DeviceAssembler: domain2DTO(copyOfDevices)

activate DeviceAssembler

loop for each device in copyOfDevices

create DeviceDTO
    DeviceAssembler -> DeviceDTO: createDeviceDTO(device)
    activate DeviceDTO
    DeviceDTO --> DeviceAssembler: deviceDTO
    deactivate DeviceDTO
end

DeviceAssembler --> AddSensorToDevice_Controller: devicesDTO

deactivate DeviceAssembler

AddSensorToDevice_Controller --> User: devicesDTO

deactivate AddSensorToDevice_Controller

'----------------------------------------------------'

User o-> AddSensorToDevice_Controller: addSensorToDevice(deviceDTO, model)

activate AddSensorToDevice_Controller

AddSensorToDevice_Controller -> DeviceAssembler: dto2Domain(deviceDTO)

activate DeviceAssembler

DeviceAssembler --> AddSensorToDevice_Controller: device

deactivate DeviceAssembler

AddSensorToDevice_Controller -> Device: addSensor(model, catalogue, sensorFactory)

activate Device

Device --> CatalogueSensor: getSensor(model, sensorFactory)

activate CatalogueSensor

CatalogueSensor --> SensorFactory: createSensor(model, catalogue)

activate SensorFactory

create Sensor

SensorFactory -> Sensor: createSensor(catalogue)

activate Sensor

Sensor --> SensorFactory: sensor

deactivate Sensor

SensorFactory --> CatalogueSensor: sensor

deactivate SensorFactory

CatalogueSensor --> Device: sensor

deactivate CatalogueSensor

Device -> Device: addSensorToDevice(sensor)

Device --> AddSensorToDevice_Controller: sensor

deactivate Device

AddSensorToDevice_Controller -> SensorAssembler: domain2DTO(sensor)

activate SensorAssembler

create SensorDTO

SensorAssembler -> SensorDTO: createSensorDTO(sensor)

activate SensorDTO

SensorDTO --> SensorAssembler: sensorDTO

deactivate SensorDTO

SensorAssembler --> AddSensorToDevice_Controller: sensorDTO

deactivate SensorAssembler

AddSensorToDevice_Controller --> User: sensorDTO

deactivate AddSensorToDevice_Controller


@enduml